Nikki Woo 204927670

_Alignas
'sizeof (struct { char a; char _Alignas (8) b; char c; })' returns 16

Let us examine this step by step. Since these data types are all characters, we know that the alignment need only be even addresses. The first char (a) takes up 1 byte. The second char (b) requires an 8 byte alignment. This means that the address that it sits on must be a multiple of 8. Since this is not necessarily true given that we have only used up 1 byte, the machine adds 7 bytes of nonsense after the initial char a so that the next char b is aligned to an address with a multiple of 8. The char b itself takes up 1 byte. Finally, the last char c takes up 1 byte and, since the address is already a multiple of 1, requires no special alignment. The 3 bytes for the 3 char values and the 7 bytes of nonsense in order to properly align the middle char adds up to 10. However, when we consider the overall alignment of the struct, we see that 10 is not a multiple of 8, which is needed to satisfy the alignment of the struct. So, we must add additional bytes of nonsense to the end to make the total number of bytes a multiple of 8. Thus the total size of the struct indicated in the problem is 16 bytes- 3 bytes for the 3 char values, 7 bytes of nonsense in order to properly align the middle char, and 6 additional bytes of nonsense at the end to satisfy the alignment requirements.
